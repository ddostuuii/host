import os
import subprocess
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

TOKEN = "7204456254:AAG_E_SfVryRcmYcgbRIqk5zE56RPYU1OTU"
CHANNEL_USERNAME = "seedhe_maut"
CHANNEL_ID = -1002363906868  

# тЬЕ рдЪреИрдирд▓ рдЬреЙрдЗрди рдЪреЗрдХ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
async def is_user_joined(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except:
        return False

# тЬЕ Join Message
async def send_join_message(update: Update) -> None:
    keyboard = [
        [InlineKeyboardButton("ЁЯФЧ Join Channel", url=f"https://t.me/{CHANNEL_USERNAME}")],
        [InlineKeyboardButton("тЬЕ рдореИрдВрдиреЗ рдЬреЙрдЗрди рдХрд░ рд▓рд┐рдпрд╛", callback_data="check_join")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "ЁЯЪА рдкрд╣рд▓реЗ рд╣рдорд╛рд░реЗ рдЪреИрдирд▓ рд╕реЗ рдЬреБрдбрд╝реЗрдВ рддрд╛рдХрд┐ рдмреЙрдЯ рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХреЗрдВ!",
        reply_markup=reply_markup
    )

# тЬЕ /start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if not await is_user_joined(user_id, context):
        await send_join_message(update)
        return

    await update.message.reply_text("ЁЯОЙ рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдЕрдм рдЖрдк рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")

# тЬЕ /host Command
async def host(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if not await is_user_joined(user_id, context):
        await send_join_message(update)
        return

    await update.message.reply_text("ЁЯУВ **Put your Python file (.py) here.**", parse_mode="Markdown")

# тЬЕ Python рдлрд╝рд╛рдЗрд▓ рд╣реЛрд╕реНрдЯ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if not await is_user_joined(user_id, context):
        await send_join_message(update)
        return

    file = update.message.document
    if not file.file_name.endswith(".py"):
        await update.message.reply_text("тЪая╕П **Please send a valid .py file!**", parse_mode="Markdown")
        return

    file_path = f"./{file.file_name}"
    new_file = await file.get_file()
    await new_file.download_to_drive(file_path)
    await update.message.reply_text(f"ЁЯУВ **File '{file.file_name}' is being hosted...**", parse_mode="Markdown")

    # тЬЕ Python рдлрд╝рд╛рдЗрд▓ рд░рди рдХрд░рдирд╛ (stdout + stderr рджреЛрдиреЛрдВ рдХреИрдкреНрдЪрд░ рдХрд░реЗрдВрдЧреЗ)
    try:
        process = subprocess.run(
            ["python3", file_path],
            capture_output=True,
            text=True,
            timeout=60  # 60 рд╕реЗрдХрдВрдб рдореЗрдВ рдЕрдЧрд░ рдЖрдЙрдЯрдкреБрдЯ рди рдорд┐рд▓реЗ рддреЛ рд╕реНрдЯреЙрдк рдХрд░реЛ
        )
        stdout = process.stdout.strip() or "No Output"
        stderr = process.stderr.strip() or "No Errors"

        result_message = f"тЬЕ **Execution Output:**\n```{stdout}```\nтЭМ **Errors:**\n```{stderr}```"
        await update.message.reply_text(result_message, parse_mode="Markdown")
    except subprocess.TimeoutExpired:
        await update.message.reply_text("тЭМ **Error:** Execution Timed Out!", parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"тЭМ **Error:** `{str(e)}`", parse_mode="Markdown")

# тЬЕ "тЬЕ рдореИрдВрдиреЗ рдЬреЙрдЗрди рдХрд░ рд▓рд┐рдпрд╛" рдмрдЯрди рдХрд╛ рд╣реИрдВрдбрд▓рд░
async def check_join(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            await query.answer("тЬЕ рдЖрдкрдиреЗ рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ!", show_alert=True)
            await query.message.edit_text("ЁЯОЙ рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдЕрдм рдЖрдк рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")
        else:
            await query.answer("ЁЯЪл рдкрд╣рд▓реЗ рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░реЗрдВ!", show_alert=True)
    except:
        await query.answer("ЁЯЪл рдкрд╣рд▓реЗ рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░реЗрдВ!", show_alert=True)

# тЬЕ рдмреЙрдЯ рд╕реНрдЯрд╛рд░реНрдЯ рдлрдВрдХреНрд╢рди
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("host", host))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))  
    app.add_handler(CallbackQueryHandler(check_join, pattern="check_join"))

    app.run_polling()

if __name__ == "__main__":
    main()

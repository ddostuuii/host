import os
import asyncio
import time
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ‚úÖ ‡§¨‡•â‡§ü ‡§ü‡•ã‡§ï‡§® ‡§î‡§∞ ‡§ö‡•à‡§®‡§≤ ‡§°‡§ø‡§ü‡•á‡§≤‡•ç‡§∏ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡§æ
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1002363906868"))
ADMIN = int(os.getenv("ADMIN_ID", "7017469802"))

# ‚úÖ ‡§è‡§°‡§Æ‡§ø‡§® ‡§î‡§∞ ‡§Ö‡§™‡•ç‡§∞‡•Ç‡§µ‡•ç‡§° ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§´‡§º‡§æ‡§á‡§≤ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡§æ
admins_file = "admins.txt"
approved_users_file = "approved_users.txt"

def load_users(filename):
    if os.path.exists(filename):
        with open(filename, "r") as f:
            return set(map(int, f.read().splitlines()))
    return set()

admins = load_users(admins_file)
admins.add(ADMIN)
approved_users = load_users(approved_users_file)

# ‚úÖ ‡§®‡•â‡§∞‡•ç‡§Æ‡§≤ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§°‡•á‡§ü‡§æ (‡§≤‡§ø‡§Æ‡§ø‡§ü ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó)
normal_user_data = {}
active_users = set()
user_files = {}
running_processes = {}

# ‚úÖ ‡§è‡§°‡§Æ‡§ø‡§® ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
def save_users(filename, user_set):
    with open(filename, "w") as f:
        f.write("\n".join(map(str, user_set)))

# ‚úÖ /add_admin Command
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in admins:
        await update.message.reply_text("üö´ **‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!**", parse_mode="Markdown")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è **‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§¶‡•á‡§Ç!**\n‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/add_admin 123456789`", parse_mode="Markdown")
        return

    try:
        new_admin = int(context.args[0])
        if new_admin in admins:
            await update.message.reply_text("‚úÖ **‡§Ø‡§π ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•à!**", parse_mode="Markdown")
        else:
            admins.add(new_admin)
            save_users(admins_file, admins)
            await update.message.reply_text(f"‚úÖ **‡§Ø‡•Ç‡§ú‡§º‡§∞ {new_admin} ‡§ï‡•ã ‡§è‡§°‡§Æ‡§ø‡§® ‡§¨‡§®‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à!**", parse_mode="Markdown")
    except ValueError:
        await update.message.reply_text("‚ùå **‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§Ü‡§à‡§°‡•Ä! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§¶‡•á‡§Ç‡•§**", parse_mode="Markdown")

# ‚úÖ /stop_host Command
async def stop_host(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if user_id not in running_processes:
        await update.message.reply_text("‚ö†Ô∏è **‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ö‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§∞‡§π‡•Ä!**", parse_mode="Markdown")
        return

    process = running_processes[user_id]
    process.terminate()  # ‚úÖ Script stop ‡§ï‡§∞‡•á‡§Ç
    del running_processes[user_id]

    if user_id in user_files:
        os.remove(user_files[user_id])  # ‚úÖ Delete script file
        del user_files[user_id]

    await update.message.reply_text("üõë **‡§Ü‡§™‡§ï‡•Ä ‡§π‡•ã‡§∏‡•ç‡§ü ‡§ï‡•Ä ‡§ó‡§à ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§∞‡•ã‡§ï ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à!**", parse_mode="Markdown")

# ‚úÖ ‡§ö‡•à‡§®‡§≤ ‡§ú‡•â‡§á‡§® ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
async def is_user_joined(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except:
        return False

# ‚úÖ ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§π‡•ã‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§≤‡§ø‡§Æ‡§ø‡§ü ‡§ö‡•á‡§ï
def can_host_script(user_id: int) -> bool:
    if user_id in admins or user_id in approved_users:
        return True  

    now = time.time()

    if user_id not in normal_user_data:
        normal_user_data[user_id] = {"count": 0, "start_time": now}

    user_info = normal_user_data[user_id]

    if user_info["count"] >= 2:
        if now - user_info["start_time"] >= 24 * 3600:
            user_info["count"] = 0  
            user_info["start_time"] = now  
        else:
            return False

    return True  

# ‚úÖ /start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if not await is_user_joined(user_id, context):
        await update.message.reply_text("üö´ ‡§™‡§π‡§≤‡•á ‡§ö‡•à‡§®‡§≤ ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç!")
        return
    await update.message.reply_text("üéâ ‡§¨‡•â‡§ü ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! `/host` ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§≠‡•á‡§ú‡•á‡§Ç ‡§î‡§∞ ‡§´‡§ø‡§∞ `.py` ‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§")

# ‚úÖ /host Command
async def host(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if not await is_user_joined(user_id, context):
        await update.message.reply_text("üö´ ‡§™‡§π‡§≤‡•á ‡§ö‡•à‡§®‡§≤ ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç!")
        return

    if not can_host_script(user_id):
        await update.message.reply_text("‚è≥ **‡§Ü‡§™ 4 ‡§ò‡§Ç‡§ü‡•á ‡§¨‡§æ‡§¶ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§π‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§**", parse_mode="Markdown")
        return

    active_users.add(user_id)
    await update.message.reply_text("üìÇ **‡§Ö‡§¨ ‡§Ü‡§™ `.py` ‡§´‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§¨‡•â‡§ü ‡§â‡§∏‡•á ‡§π‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§ó‡§æ‡•§**", parse_mode="Markdown")

# ‚úÖ 20 ‡§ò‡§Ç‡§ü‡•á ‡§¨‡§æ‡§¶ ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ë‡§ü‡•ã ‡§∏‡•ç‡§ü‡•â‡§™ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
async def stop_script_after_timeout(user_id: int, file_path: str, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(20 * 3600)

    if user_id in running_processes:
        process = running_processes[user_id]
        process.terminate()
        del running_processes[user_id]

        if user_id in user_files:
            os.remove(user_files[user_id])
            del user_files[user_id]

        await context.bot.send_message(user_id, f"‚è≥ **Script '{file_path}' has been stopped after 20 hours.**")

# ‚úÖ Python ‡§´‡§º‡§æ‡§á‡§≤ ‡§π‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in active_users:
        await update.message.reply_text("‚ö†Ô∏è **‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á /host ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§≠‡•á‡§ú‡•á‡§Ç!**", parse_mode="Markdown")
        return

    if not can_host_script(user_id):
        await update.message.reply_text("‚è≥ **‡§Ü‡§™ 4 ‡§ò‡§Ç‡§ü‡•á ‡§¨‡§æ‡§¶ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§π‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§**", parse_mode="Markdown")
        return

    file = update.message.document
    if not file.file_name.endswith(".py"):
        await update.message.reply_text("‚ö†Ô∏è **Please send a valid .py file!**", parse_mode="Markdown")
        return

    file_path = f"./hosted_scripts/{file.file_name}"
    os.makedirs("hosted_scripts", exist_ok=True)
    
    try:
        new_file = await file.get_file()
        await new_file.download_to_drive(file_path)
    except:
        await update.message.reply_text("‚ùå **‡§´‡§º‡§æ‡§á‡§≤ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à!**")
        return

    user_files[user_id] = file_path

    normal_user_data[user_id]["count"] += 1

    await update.message.reply_text(f"üìÇ **File '{file.file_name}' is being hosted...**", parse_mode="Markdown")

    asyncio.create_task(stop_script_after_timeout(user_id, file_path, context))
    asyncio.create_task(run_python_script(update, file_path, user_id))

# ‚úÖ Python ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§∞‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
async def run_python_script(update: Update, file_path: str, user_id: int):
    try:
        process = await asyncio.create_subprocess_exec(
            "python3", file_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        running_processes[user_id] = process

        stdout_lines = []
        stderr_lines = []

        while True:
            stdout_line = await process.stdout.readline()
            stderr_line = await process.stderr.readline()

            if not stdout_line and not stderr_line:
                break

            if stdout_line:
                stdout_lines.append(stdout_line.decode().strip())

            if stderr_line:
                stderr_lines.append(stderr_line.decode().strip())

        stdout = "\n".join(stdout_lines) or "No Output"
        stderr = "\n".join(stderr_lines) or "No Errors"

        result_message = f"‚úÖ **Execution Output:**\n```{stdout}```\n‚ùå **Errors:**\n```{stderr}```"
        await update.message.reply_text(result_message, parse_mode="Markdown")

        del running_processes[user_id]

    except Exception as e:
        await update.message.reply_text(f"‚ùå **Error:** `{str(e)}`", parse_mode="Markdown")

# ‚úÖ ‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("stop_host", stop_host))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("host", host))
    app.add_handler(CommandHandler("add_admin", add_admin))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.run_polling()

if __name__ == "__main__":
    main()

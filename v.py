import os
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

TOKEN = "8024990900:AAEVjj9q-b3SIEakZPfGOnq03rSNwQWniDU"
CHANNEL_USERNAME = "seedhe_maut"
CHANNEL_ID = -1002363906868  

active_users = set()  
user_files = {}  # рдпреВрдЬрд╝рд░ рдХреА рдЖрдЦрд┐рд░реА рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдлрд╛рдЗрд▓ рд╕реНрдЯреЛрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
running_processes = {}  # рдпреВрдЬрд╝рд░ рдХреЗ рдкреНрд░реЛрд╕реЗрд╕ рдХреЛ рд╕реНрдЯреЛрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП

# тЬЕ рдЪреИрдирд▓ рдЬреЙрдЗрди рдЪреЗрдХ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
async def is_user_joined(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except:
        return False

# тЬЕ /start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if not await is_user_joined(user_id, context):
        await send_join_message(update)
        return
    await update.message.reply_text("ЁЯОЙ рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! `/host` рдХрдорд╛рдВрдб рднреЗрдЬреЗрдВ рдФрд░ рдлрд┐рд░ `.py` рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред")

# тЬЕ /host Command
async def host(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if not await is_user_joined(user_id, context):
        await send_join_message(update)
        return

    active_users.add(user_id)  
    await update.message.reply_text("ЁЯУВ **рдЕрдм рдЖрдк `.py` рдлрд╛рдЗрд▓ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВ, рдмреЙрдЯ рдЙрд╕реЗ рд╣реЛрд╕реНрдЯ рдХрд░реЗрдЧрд╛ред**", parse_mode="Markdown")

# тЬЕ Python рдлрд╝рд╛рдЗрд▓ рд╣реЛрд╕реНрдЯ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if not await is_user_joined(user_id, context):
        await send_join_message(update)
        return

    if user_id not in active_users:
        await update.message.reply_text("тЪая╕П **Please use /host first!**", parse_mode="Markdown")
        return

    file = update.message.document
    if not file.file_name.endswith(".py"):
        await update.message.reply_text("тЪая╕П **Please send a valid .py file!**", parse_mode="Markdown")
        return

    file_path = f"./{file.file_name}"
    new_file = await file.get_file()
    await new_file.download_to_drive(file_path)

    user_files[user_id] = file_path  
    await update.message.reply_text(f"ЁЯУВ **File '{file.file_name}' is being hosted...**", parse_mode="Markdown")

    await run_python_script(update, file_path, user_id)

# тЬЕ Python рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдХреЛ async рд░рди рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
async def run_python_script(update: Update, file_path: str, user_id: int):
    try:
        process = await asyncio.create_subprocess_exec(
            "python3", file_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        running_processes[user_id] = process  # рдкреНрд░реЛрд╕реЗрд╕ рд╕реНрдЯреЛрд░ рдХрд░реЗрдВ
        
        stdout, stderr = await process.communicate()
        stdout = stdout.decode().strip() or "No Output"
        stderr = stderr.decode().strip() or "No Errors"

        result_message = f"тЬЕ **Execution Output:**\n```{stdout}```\nтЭМ **Errors:**\n```{stderr}```"
        await update.message.reply_text(result_message, parse_mode="Markdown")

    except asyncio.TimeoutError:
        await update.message.reply_text("тЭМ **Error:** Execution Timed Out!", parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"тЭМ **Error:** `{str(e)}`", parse_mode="Markdown")

# тЬЕ /stop Command тАУ рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдХреЛ рд░реЛрдХрдиреЗ рдХреЗ рд▓рд┐рдП
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id in running_processes:
        process = running_processes[user_id]
        process.kill()  
        del running_processes[user_id]  

        await update.message.reply_text("ЁЯЫС **Your script has been stopped.**", parse_mode="Markdown")
    else:
        await update.message.reply_text("тЪая╕П **No script is currently running!**", parse_mode="Markdown")

# тЬЕ /rehost Command тАУ рдкреБрд░рд╛рдиреА рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдХреЛ рдлрд┐рд░ рд╕реЗ рд░рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
async def rehost(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in user_files:
        await update.message.reply_text("тЪая╕П **No previous script found!**", parse_mode="Markdown")
        return

    file_path = user_files[user_id]
    await update.message.reply_text(f"тЩ╗я╕П **Rehosting your last uploaded script: {file_path}**", parse_mode="Markdown")
    
    await run_python_script(update, file_path, user_id)

# тЬЕ "тЬЕ рдореИрдВрдиреЗ рдЬреЙрдЗрди рдХрд░ рд▓рд┐рдпрд╛" рдмрдЯрди рдХрд╛ рд╣реИрдВрдбрд▓рд░
async def check_join(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            await query.answer("тЬЕ рдЖрдкрдиреЗ рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ!", show_alert=True)
            await query.message.edit_text("ЁЯОЙ рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! `/host` рдХрдорд╛рдВрдб рднреЗрдЬреЗрдВ рдФрд░ рдлрд┐рд░ `.py` рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред")
        else:
            await query.answer("ЁЯЪл рдкрд╣рд▓реЗ рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░реЗрдВ!", show_alert=True)
    except:
        await query.answer("ЁЯЪл рдкрд╣рд▓реЗ рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░реЗрдВ!", show_alert=True)

# тЬЕ рдмреЙрдЯ рд╕реНрдЯрд╛рд░реНрдЯ рдлрдВрдХреНрд╢рди
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("host", host))
    app.add_handler(CommandHandler("stop", stop))  # Stop command add рдХрд┐рдпрд╛
    app.add_handler(CommandHandler("rehost", rehost))  # Rehost command add рдХрд┐рдпрд╛
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))  
    app.add_handler(CallbackQueryHandler(check_join, pattern="check_join"))

    app.run_polling()

if __name__ == "__main__":
    main()
